<p style="color: green"><%= notice %></p>

<h1>Messages</h1>

<%= link_to 'View Search Terms', search_terms_path, id: 'view_search_terms', method: :get %>

<hr />

<%= form_tag messages_path, method: :get, id: "search_form" do %>
  <%= text_field_tag :search, params[:search], id: "search_input" %>
  <%= submit_tag "Search" %>
<% end %>

<hr />

<%= link_to "New message", new_message_path %>

<hr />

<div id="messages">
  <%= render partial: 'messages_list', locals: { messages: @messages } %>
</div>

<script>
  function addOrUpdateHiddenField(form, fieldName, value) {
    var hiddenField = form.querySelector('input[type="hidden"][name="' + fieldName + '"]');
    if (!hiddenField) {
      hiddenField = document.createElement('input');
      hiddenField.setAttribute('type', 'hidden');
      hiddenField.setAttribute('name', fieldName);
      form.appendChild(hiddenField);
    }
    hiddenField.value = value;
  }

  function getUserIP() {
    if (!localStorage.getItem('userIP')) {
      fetch('https://api.ipify.org?format=json')
        .then(response => response.json())
        .then(data => {
        localStorage.setItem('userIP', data.ip);
      });
    }
    return localStorage.getItem('userIP');
  }

  document.addEventListener("DOMContentLoaded", function() {
    const searchInput = document.getElementById("search_input");
    const searchForm = document.getElementById("search_form");
    const textLength = searchInput.value.length;
    let searchTimeout = null;

    searchInput.focus();
    searchInput.setSelectionRange(textLength, textLength);

    searchInput.addEventListener("keyup", function() {
      clearTimeout(searchTimeout);
      fetchMessages(searchInput.value);
      searchTimeout = setTimeout(function() {
        document.getElementById("search_form").submit();
      }, 2000);
    });

    const userIP = getUserIP();
    addOrUpdateHiddenField(searchForm, 'user_ip', userIP);

    let viewSearchTermsLink = document.getElementById('view_search_terms');
    if (viewSearchTermsLink) {
      const userIP = getUserIP();
      if (userIP) {
        const originalHref = viewSearchTermsLink.getAttribute('href');
        viewSearchTermsLink.setAttribute('href', originalHref + '?user_ip=' + encodeURIComponent(userIP));
      }
    }
  });

  function fetchMessages(query) {
    fetch(`/messages/fetch_messages?search=${encodeURIComponent(query)}`)
      .then(response => response.text())
      .then(html => {
      document.getElementById("messages").innerHTML = html;
    });
  }
</script>
